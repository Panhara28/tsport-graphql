extend type Query {
  roleList: RoleList
  role(id: Int): Role
  adminRoleList: RoleList
  hasRole(userId: Int!): Role
  adminHasRole(userId: Int!): Role
  roleDetail(roleId: Int!): Role
}

extend type Mutation {
  createRole(input: RoleInput, permission: RolePermissionInput): Int
  updateRole(id: Int, input: RoleInput): Boolean
  roleManageAccess(roleId: Int!, read: Boolean, write: Boolean, modify: Boolean, remove: Boolean): Boolean
  adminAssignRoleToUser(userId: Int!, roleId: Int!): Boolean
}

type RoleList {
  data: [Role]
  permission: RolePermission
}

type Role {
  id: Int
  name: String
  access: RoleAccess
}

type RoleAccess {
  read: Boolean
  write: Boolean
  modify: Boolean
  delete: Boolean
}

input RoleInput {
  name: String
}

type RolePermission {
  isCreated: Boolean
  isModified: Boolean
  isRemove: Boolean
  isList: Boolean
  isDetail: Boolean
}

input RolePermissionInput {
  isCreated: Boolean
  isModified: Boolean
  isRemove: Boolean
  isList: Boolean
  isDetail: Boolean
}
