extend type Query {
  customer: Customer @auth(roles: ["CUSTOMER"])
  customerList(offset: Int = 0, limit: Int = 10, phone: String): CustomerList @auth(roles: ["ADMIN", "SUPER_ADMIN"])
  customerById(id: Int!): Customer @auth(roles: ["ADMIN", "SUPER_ADMIN"])
}

extend type Mutation {
  createCustomer(data: CustomerInput): Boolean @auth(public: true)
  changePasswordCustomer(oldPassword: String!, newPassword: String!): Boolean @auth(roles: ["CUSTOMER"])
  loginCustomer(username: String!, password: String!): Token @auth(public: true)
  updateCustomer(id: Int, data: CustomerInput): Boolean @auth(roles: ["CUSTOMER", "ADMIN", "SUPER_ADMIN"])
}

type CustomerList {
  data: [Customer]
  pagination: Pagination
}

type Customer {
  id: Int
  fullname: String
  username: String
  phone: String
  address: String
  type: CustomerType
  discount: Float
  profile: String
}

input CustomerInput {
  fullname: String
  username: String
  password: String
  phone: String
  address: String
  type: CustomerType
  discount: Float
  profile: String
}

enum CustomerType {
  premium
  default
}
