extend type Query {
  customer: MeCustomer @auth(public: true)
  customerList(offset: Int = 0, limit: Int = 10, phone: String): CustomerList @auth(roles: ["ADMIN", "SUPER_ADMIN"])
  customerById(id: Int!): Customer @auth(roles: ["ADMIN", "SUPER_ADMIN"])
}

extend type Mutation {
  createCustomer(data: CustomerInput): Boolean @auth(public: true)
  changePasswordCustomer(oldPassword: String!, newPassword: String!): Boolean @auth(roles: ["CUSTOMER"])
  login(input: LoginInput!): AuthResponse @auth(public: true)
  updateCustomer(id: Int, data: CustomerInput): Boolean @auth(roles: ["CUSTOMER", "ADMIN", "SUPER_ADMIN"])
  createCustomerAddress(data: CustomerAddressInput): Boolean @auth(roles: ["CUSTOMER"])
  updateCustomerAddress(id: Int!, data: CustomerAddressInput): Boolean @auth(roles: ["CUSTOMER"])
  deleteCustomerAddress(id: Int!): Boolean @auth(roles: ["CUSTOMER"])
  setDefaultAddress(id: Int!): Boolean @auth(roles: ["CUSTOMER"])
}

input CustomerAddressInput {
  address: String
  lat: String
  lng: String
}

input LoginInput {
  email: String
  password: String
}

type AuthResponse {
  token: String
  permissions: [String]
}

type CustomerList {
  data: [Customer]
  pagination: Pagination
}

type Social {
  type: String
  link: String
}

type Profile {
  id: Int
  avatar: Attachment
  bio: String
  socials: [Social]
  contact: String
}

type UserAddress {
  street_address: String
  country: String
  city: String
  state: String
  zip: String
}

type Address {
  id: Int
  title: String
  default: Boolean
  type: String
  address: UserAddress
}

type Wallet {
  id: Int
  created_at: String
  updated_at: String
  total_points: String
  points_used: Int
  available_points: Int
}

type MeCustomer {
  id: Int
  name: String
  email: String
  profile: Profile
  address: [Address]
  wallet: Wallet
}

type Customer {
  id: Int
  fullname: String
  username: String
  phone: String
  address: String
  type: CustomerType
  discount: Float
  profile: String
}

input CustomerInput {
  fullname: String
  username: String
  password: String
  phone: String
  address: String
  type: CustomerType
  discount: Float
  profile: String
}

enum CustomerType {
  premium
  default
}
