extend type Query {
  hrEmployeeList(pagination: PaginationInput, filter: HrEmployeeFilter): HrEmployeeList
  hrEmployee(id: Int!): HrEmployee
}

extend type Mutation {
  updateHrEmployee(id: Int!, input: HrEmployeeInput): Boolean
  createHrEmployee(input: HrEmployeeInput): Int
  updateHrEmployeeStatus(id: Int!, status: Boolean): Boolean
}

type HrEmployee {
  id: Int
  username: String
  fullname: String
  fullname_en: String
  profile: String
  phoneNumber: String
  status: Boolean
  email: String
  gender: String
  nationality: String
  dob: String
  district: String
  commune: String
  education_level: String
  passport_id: String
  national_id: String
  position_level: String
  position_description: String
  unit: String
  department_id: Int
  general_department_id: Int
  contact_city_or_province: String
  province: String
  homeNo: String
  streetNo: String
  village_or_group: String
  contact_district: String
  contact_village: String
  contact_commune: String
  officer_id: String
  office_id: Int
}

input HrEmployeeFilter {
  officerName: String
}

input HrEmployeeInput {
  username: String
  fullname: String
  password: String
  fullname_en: String
  profile: String
  phoneNumber: String
  email: String
  gender: String
  nationality: String
  dob: String
  district: String
  commune: String
  education_level: String
  passport_id: String
  national_id: String
  position_level: String
  position_description: String
  unit: String
  department_id: Int
  general_department_id: Int
  contact_city_or_province: String
  province: String
  homeNo: String
  streetNo: String
  village_or_group: String
  contact_district: String
  contact_village: String
  contact_commune: String
  officer_id: String
  office_id: Int
}

type HrEmployeeList {
  data: [HrEmployee]
  pagination: Pagination
}
